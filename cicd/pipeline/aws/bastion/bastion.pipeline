pipeline {
    agent {
        label "Linux"
    }

    parameters {
        choice(name: 'Environment', choices: ['Integration','Staging','E2E','Production'], description: '')
        choice(name: 'Timeout', choices: ['60','120','180','360'], description: 'Time to wait in minutes before EC2 auto shutdown')
    }

    options {
        ansiColor('xterm')
        withAWS(credentials:"projectNameNonProd")
    }

    environment {
        AWS_DEFAULT_REGION = "eu-west-1"
    }

    stages {

        stage("Init") {
            steps {
                script {
                    jsonObject = jsonObj()
                    ENV = jsonObject["Environments"][params.Environment]["envAlias"]
                    currentBuild.displayName = "Bastion-${ENV}-${env.BUILD_TIMESTAMP}"
                    userInfo_Name = userInfo('USER')
                    userInfo_Email = userInfo('EMAIL')
                    RDS_Address = jsonObject["Environments"][params.Environment]["rdsUrl"]
                    bastion_server_port = jsonObject["Environments"][params.Environment]["local_port"]
                    sshPrivateKeyName = "sshKey_${ENV}"
                }
            }
        }

        stage("Create") {
            steps {
                script {
                    // Generate Key for Login
                    sh(script: """
                        ssh-keygen -b 2048 -C "${userInfo_Email}" -m PEM -t rsa -f ssh_key -q -N ""
                        cp ssh_key ${sshPrivateKeyName}
                    """)
                    sshPublicKey = readFile(file: "ssh_key.pub")

                    if (params.Environment != 'Production') {
                        // All NonProd Environment are in same AWS account
                        sh(script: "terraform init")
                        sh(script: """terraform apply -var='ssh_pub_key="${sshPublicKey}"' -var='email=${userInfo_Email}' -var='environment=${ENV}' -var='timeout=${params.Timeout}' -auto-approve""")
                        bastion_server_pub_ip = sh(returnStdout: true, script: "terraform output bastion_server_public_ip")     
                    } else {
                        // If Production is different AWS Account
                        withAWS(credentials:"projectProd") {
                            sh(script: "terraform init")
                            sh(script: """terraform apply -var='ssh_pub_key="${sshPublicKey}"' -var='email=${userInfo_Email}' -var='environment=${ENV}' -var='timeout=${params.Timeout}' -auto-approve""")
                            bastion_server_pub_ip = sh(returnStdout: true, script: "terraform output bastion_server_public_ip")
                        }
                    }
                    
                }
            }
        }

        stage("Send Details") {
            steps {
                script {
                    emailext(from: "amitkshirsagar13@gmail.com", body: """
                        <h4><strong>Hi ${userInfo_Name},</strong></h4>
                        <p>Please save the attached private key file on your local machine and follow the below steps to open an SSH Tunnel to the ${params.Environment} DB.</p>
                        <ol>
                        <li>Open <strong>CMD</strong> and navigate to the location of your private key</li>
                        <li>exeucte the following command:</li>
                        </ol>
                        <p style="padding-left: 60px;"><span style="color: #008000;"><em>Icacls ${sshPrivateKeyName} /c /t /Inheritance:d &amp; Icacls ${sshPrivateKeyName} /c /t /Grant %UserName%:F &amp; Icacls ${sshPrivateKeyName} /c /t /Remove Administrator "Authenticated Users" BUILTIN\\Administrators BUILTIN Everyone System Users &amp; ssh -o StrictHostKeyChecking=no -o ExitOnForwardFailure=yes -i ${sshPrivateKeyName} -L 127.0.0.1:${bastion_server_port}:${RDS_Address}:3306 ec2-user@${bastion_server_pub_ip}</em></span></p>
                        <ol start="3">
                        <li>When you see a Linux promt after running the above command you are done. <span style="text-decoration: underline;">Leave the window open to keep the connection alive.</span></li>
                        <li>Open your favor MySQL client and connect to&nbsp;<strong><span style="color: #008000;"><em>127.0.0.1:${bastion_server_port}</em></span></strong><span style="color: #008000;"><em>&nbsp;</em></span>using the environment DB creds</li>
                        </ol>
                        <hr />
                        <h4>first timer? (do the following),</h4>
                        <ul>
                        <li>Open elevated (run as admin) PowerShell console</li>
                        <li>Install&nbsp;<a href="https://chocolatey.org/why-chocolatey" target="_blank" rel="noopener"><strong>Chocolaty</strong></a> using the following command:</li>
                        </ul>
                        <p style="padding-left: 60px;"><span style="color: #008000;"><em>Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))</em></span></p>
                        <ul>
                        <li>Install <a href="https://chocolatey.org/packages/openssh/8.0.0.1" target="_blank" rel="noopener"><strong>openssh</strong></a> using the following command:</li>
                        </ul>
                        <p style="padding-left: 60px;"><span style="color: #008000;"><em>choco install openssh -y</em></span></p>
                        <p>Thanks,</p>
                        <p><a href="mailto: amitkshirsagar13@gmail.com">Amit Kshirsagar</a></p>
                        <p><strong>NOTE:</strong> This is an automated system generated E-mail, please do not reply.</p>
                    """, subject: '${BUILD_DISPLAY_NAME}', attachmentsPattern:  "${sshPrivateKeyName}", recipientProviders: [[$class: 'RequesterRecipientProvider']])
                }
            }
        }
    }
    post {
        always {
            cleanWs()
        }
    }
}

def userInfo(var) {
    wrap([$class: 'BuildUser']) {
        if (var == 'USER') {
            return env.BUILD_USER
        }
        if (var == 'EMAIL') {
            return env.BUILD_USER_EMAIL
        }
    }
}

def jsonObj() {
    script {
        jsonObj = readJSON text: """
                    {
                        "Environments": {
                            "Integration": {
                                "rdsUrl": "intrds.random2.eu-west-1.rds.amazonaws.com",
                                "envAlias": "Integration",
                                "local_port": "3105"
                            },
                            "Staging": {
                                "rdsUrl": "stgrds.random1.eu-west-1.rds.amazonaws.com",
                                "envAlias": "Stg",
                                "local_port": "3106"
                            },
                            "E2E": {
                                "rdsUrl": "e2erds.random3.eu-west-1.rds.amazonaws.com",
                                "envAlias": "E2E",
                                "local_port": "3107"
                            },
                            "Production": {
                                "rdsUrl": "prodrds.random4.eu-west-1.rds.amazonaws.com",
                                "envAlias": "Production",
                                "local_port": "3109"
                            }
                        }
                    }
            """
        return jsonObj
    }
}
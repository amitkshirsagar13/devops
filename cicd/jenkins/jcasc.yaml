jenkins:
  systemMessage: "Jenkins configured automatically by Jenkins Configuration as Code plugin\n\n"
  clouds:
    - docker:
        name: "docker"
        dockerApi:
          dockerHost:
            uri: "unix:///var/run/docker.sock"
        templates:
          - labelString: "generic-docker-slave"
            dockerTemplateBase:
              image: "amitkshirsagar13/devops-jenkins-agent-generic:latest"
              mounts:
                # - "type=bind,source=/var/jenkins/.m2,destination=/root/.m2"
                - "type=bind,source=/var/run/docker.sock,destination=/var/run/docker.sock"
            remoteFs: "/home/jenkins"
            connector:
              attach:
                user: "root"
            instanceCapStr: "5"
            retentionStrategy:
              idleMinutes: 1
          - labelString: "maven-docker-slave"
            dockerTemplateBase:
              image: "amitkshirsagar13/devops-jenkins-agent-maven:latest"
              mounts:
                # - "type=bind,source=/var/jenkins/.m2,destination=/root/.m2"
                - "type=bind,source=/var/run/docker.sock,destination=/var/run/docker.sock"
            remoteFs: "/home/jenkins"
            connector:
              attach:
                user: "root"
            instanceCapStr: "5"
            retentionStrategy:
              idleMinutes: 1
          - labelString: "terraform-docker-slave"
            dockerTemplateBase:
              image: "amitkshirsagar13/devops-jenkins-agent-terraform:latest"
              mounts:
                # - "type=bind,source=/var/jenkins/.m2,destination=/root/.m2"
                - "type=bind,source=/var/run/docker.sock,destination=/var/run/docker.sock"
            remoteFs: "/home/jenkins"
            connector:
              attach:
                user: "root"
            instanceCapStr: "5"
            retentionStrategy:
              idleMinutes: 1
  securityRealm:
    local:
      allowsSignup: false
      users:
        - id: "admin"
          password: "admin"
          properties:
          - mailer:
              emailAddress: "amitkshirsagar13@gmail.com"
        - id: "dev"
          password: "dev"
          properties:
          - mailer:
              emailAddress: "poonamkshirsagar13@gmail.com"
        - id: "devops"
          password: "devops"
          properties:
          - mailer:
              emailAddress: "amoghkshirsagar13@gmail.com"
  authorizationStrategy:
    globalMatrix:
      permissions:
        - "Job/Build:dev"
        - "Job/Cancel:dev"
        - "Job/Read:dev"
        - "Job/Workspace:dev"
        - "Overall/Administer:admin"
        - "Overall/Read:authenticated"
        - "Run/Replay:dev"
        - "Run/Update:dev"
  # globalNodeProperties:
  # - envVars:
  #     env:
  #     - key: VARIABLE1
  #       value: foo
  #     - key: VARIABLE2
  #       value: bar
  # nodes:
  #   - permanent:
  #       name: "static-agent"
  #       remoteFS: "/home/jenkins"
  #       launcher:
  #         jnlp:
  #           workDirSettings:
  #             disabled: true
  #             failIfWorkDirIsMissing: false
  #             internalDir: "remoting"
  #             workDirPath: "/tmp"
  # slaveAgentPort: 50000
  # agentProtocols:
  #   - "jnlp2"

jobs:
  - script: |
      multibranchPipelineJob('sample-service') {
        branchSources {
          git {
            id = 'sample-service'
            remoteName = 'origin'
            remote('https://github.com/amitkshirsagar13/sample-service.git')
            includes('feature*')
            excludes('')
          }
        }
      }
      
      pipelineJob('kubernetes-connectivity-test') {
        description("Test Kubernetes connectivity and setup")
        definition {
          cps {
            script('''
                pipeline {
                  agent { label 'generic-docker-slave' }
                  parameters {
                    choice(name: 'Level', choices: ['local','int','stg','e2e','live'], description: 'Cluster level')
                  }
                  environment {
                    ENVKEY = "$Level".toUpperCase()
                    KUBEHOST = "$ENVKEY" + "_KUBE_HOST"
                    KUBETOKEN = "$ENVKEY" + "_JENKINS_KUBE_TOKEN"
                  }
                  stages {
                    stage('List pods') {
                      steps {
                          sh "echo $ENVKEY $KUBEHOST $KUBETOKEN"
                        withCredentials([string(credentialsId: "$KUBEHOST", variable: 'KUBE_HOST'),
                                          string(credentialsId: "$KUBETOKEN", variable: 'KUBE_TOKEN')]) {
                          withKubeConfig([credentialsId: "$KUBETOKEN",
                                          serverUrl: "$KUBE_HOST",
                                          namespace: 'echo'
                                          ]) {
                            sh 'kubectl get pods'
                          }
                          withKubeConfig([credentialsId: "$KUBETOKEN",
                                          serverUrl: "$KUBE_HOST",
                                          namespace: 'kube-system'
                                          ]) {
                            sh 'kubectl get pods'
                          }
                        }
                      }
                    }
                  }
                }
            '''.stripIndent())
            sandbox()
          }
        }
      }
      
      pipelineJob('generic-docker-slave-test') {
        description("Need to have defined docker cloud plugin with label generic-docker-slave agent")
        definition {
          cps {
            script('''
              agentName = "generic-docker-slave"
              agentLabel = "${println 'Right Now the Agent Name is ' + agentName; return agentName}"

              pipeline {
                agent { label 'generic-docker-slave' }
                parameters {
                  choice(name: 'ErrorBuild', choices: ['no','yes'], description: 'Error Build to test pipeline')
                }
                environment {
                  ERRORBUILD = "$ErrorBuild".toUpperCase()
                }
                stages {
                  stage('Location') {
                    agent { label 'maven-docker-slave' }
                    steps {
                      sh """
                        hostname
                        pwd
                        whoami
                        mvn -v
                        ls -ltraR /home/jenkins
                      """
                    }
                  }
                  stage('Checking') {
                    steps {
                      script {
                        agentName = "generic-docker-slave"
                        println agentLabel
                        println agentName
                      }
                    }
                  }
                  stage('Run Tests') {
                    parallel ({
                      stage('Test On Windows') {
                        agent {
                          label agentName
                        }
                        steps {
                          sh "sleep 2m"
                        }
                      }
                      stage('Test On Linux') {
                        agent {
                          label agentName
                        }
                        steps {
                          sh "sleep 1m"
                        }
                      }
                      stage('Test On Mac') {
                        agent {
                          label agentName
                        }
                        steps {
                          script {
                            sh """
                              sleep 90
                              docker ps
                            """
                            errorBuild = env.ErrorBuild
                            if(errorBuild == 'yes') {
                              error 'Error in group2 processing'
                            }
                          }
                        }
                      }
                    }, failFast: true)
                  }
                  stage('Final') {
                    agent { label agentLabel }
                    steps {
                      script {
                        println agentLabel
                        println agentName
                      }
                    }
                  }
                }
              }
            '''.stripIndent())
            sandbox()
          }
        }
      }

      pipelineJob('jte-demo-scripted') {
        def repo = 'https://github.com/amitkshirsagar13/sample-service.git'
        description("Pipeline for jte-scripted")
        displayName("Sample-Service-jte-scripted")
        definition {
          cpsScm {
            scm {
              git {
                remote {
                  url(repo)
                  credentials('github-ci-user')
                }
                branches('master', '**/feature*')
                scriptPath('Jenkinsfile.jte-scripted')
                extensions { }  // required as otherwise it may try to tag the repo, which you may not want
              }
            }
          }
        }
      }

      pipelineJob('jte-demo-declarative') {
        def repo = 'https://github.com/amitkshirsagar13/sample-service.git'
        description("Pipeline for jte-declarative")
        displayName("Sample-Service-jte-declarative")
        definition {
          cpsScm {
            scm {
              git {
                remote {
                  url(repo)
                  credentials('github-ci-user')
                }
                branches('main', '**/feature*')
                scriptPath('Jenkinsfile.jte-declarative')
                extensions { }  // required as otherwise it may try to tag the repo, which you may not want
              }
            }
          }
        }
      }

      pipelineJob('terraform-bastion') {
        def repo = 'https://github.com/amitkshirsagar13/devops.git'
        description("Pipeline for Terraform Bastion Demo")
        displayName("Terraform Bastion")
        definition {
          cpsScm {
            scm {
              git {
                remote {
                  url(repo)
                  credentials('github-ci-user')
                }
                branches('main', '**/feature*')
                scriptPath('cicd/pipeline/aws/bastion/bastion.pipeline')
                extensions { }  // required as otherwise it may try to tag the repo, which you may not want
              }
            }
          }
        }
      }

      pipelineJob('terraform-s3') {
        def repo = 'https://github.com/amitkshirsagar13/devops.git'
        description("Pipeline for Terraform S3 Demo")
        displayName("Terraform S3 Demo")
        definition {
          cpsScm {
            scm {
              git {
                remote {
                  url(repo)
                  credentials('github-ci-user')
                }
                branches('main', '**/feature*')
                scriptPath('cicd/pipeline/aws/s3/terraform.pipeline')
                extensions { }  // required as otherwise it may try to tag the repo, which you may not want
              }
            }
          }
        }
      }

      pipelineJob('terraform-live') {
        def repo = 'https://github.com/amitkshirsagar13/devops.git'
        description("Terraform Environment")
        displayName("Terraform Environment")
        definition {
          cpsScm {
            scm {
              git {
                remote {
                  url(repo)
                  credentials('github-ci-user')
                }
                branches('main', '**/feature*')
                scriptPath('terragrunt/aws/terraform.pipeline')
                extensions { }  // required as otherwise it may try to tag the repo, which you may not want
              }
            }
          }
        }
      }

# pipelineJob('terraform-live-PreBuild') {
#   def repo = 'https://github.com/amitkshirsagar13/devops.git'
#   description("Terraform Environment PreBuild")
#   displayName("Terraform Environment PreBuild")
#   definition {
#     scmPipelineConfigurationProvider {
#       baseDir("library")
#       scm {
#         git {
#           remote {
#             url(repo)
#             credentials('github-ci-user')
#           }
#           branches('main', '**/feature*')
#           scriptPath('terragrunt/aws/terraform.pipeline')
#           extensions { }  // required as otherwise it may try to tag the repo, which you may not want
#         }
#       }
#     }
#   }
# }



credentials:
  system:
    domainCredentials:
      - credentials:
          #######
          # User Auth
          #######
          - usernamePassword:
              scope: "GLOBAL"
              id: "github-ci-user"
              description: "Github CI ${github-ci-user} Credentials from Vault"
              username: "${github-ci-user}"
              password: "${github-ci-password}"
          ########
          # Tokens
          ########
          - string:
              scope: "GLOBAL"
              id: "github-ci-token"
              description: "Github CI Global Token ${jenkins-tokens/github-ci-token} from File"
              secret: "${jenkins-tokens/github-ci-token}"
          - string:
              scope: "GLOBAL"
              id: "LOCAL_AWS_ACCESS_KEY_ID"
              description: "LOCAL_AWS_ACCESS_KEY_ID"
              secret: "jenkins-fake-access-key"
          - string:
              scope: "GLOBAL"
              id: "LOCAL_AWS_SECRET_ACCESS_KEY"
              description: "LOCAL_AWS_SECRET_ACCESS_KEY"
              secret: "jenkins-fake-secret-key"
          - string:
              scope: "GLOBAL"
              id: "LOCAL_JENKINS_KUBE_TOKEN"
              description: "LOCAL_JENKINS_KUBE_TOKEN"
              secret: "jenkins-fake-secret-key"
          - string:
              scope: "GLOBAL"
              id: "LOCAL_KUBE_HOST"
              description: "LOCAL_KUBE_HOST"
              secret: "https://kubernetes.docker.internal:6443"
              
          - string:
              scope: "GLOBAL"
              id: "LIVE_AWS_ACCESS_KEY_ID"
              description: "LIVE_AWS_ACCESS_KEY_ID"
              secret: "jenkins-fake-access-key"
          - string:
              scope: "GLOBAL"
              id: "LIVE_AWS_SECRET_ACCESS_KEY"
              description: "LIVE_AWS_SECRET_ACCESS_KEY"
              secret: "jenkins-fake-secret-key"
          - string:
              scope: "GLOBAL"
              id: "LIVE_JENKINS_KUBE_TOKEN"
              description: "LIVE_JENKINS_KUBE_TOKEN"
              secret: "jenkins-fake-secret-key"
          - string:
              scope: "GLOBAL"
              id: "INT_AWS_ACCESS_KEY_ID"
              description: "INT_AWS_ACCESS_KEY_ID"
              secret: "jenkins-fake-access-key"
          - string:
              scope: "GLOBAL"
              id: "INT_AWS_SECRET_ACCESS_KEY"
              description: "INT_AWS_SECRET_ACCESS_KEY"
              secret: "jenkins-fake-secret-key"
          - string:
              scope: "GLOBAL"
              id: "INT_JENKINS_KUBE_TOKEN"
              description: "INT_JENKINS_KUBE_TOKEN"
              secret: "jenkins-fake-secret-key"
          - string:
              scope: "GLOBAL"
              id: "STG_AWS_ACCESS_KEY_ID"
              description: "STG_AWS_ACCESS_KEY_ID"
              secret: "jenkins-fake-access-key"
          - string:
              scope: "GLOBAL"
              id: "STG_AWS_SECRET_ACCESS_KEY"
              description: "STG_AWS_SECRET_ACCESS_KEY"
              secret: "jenkins-fake-secret-key"
          - string:
              scope: "GLOBAL"
              id: "STG_JENKINS_KUBE_TOKEN"
              description: "STG_JENKINS_KUBE_TOKEN"
              secret: "jenkins-fake-secret-key"
          - string:
              scope: "GLOBAL"
              id: "E2E_AWS_ACCESS_KEY_ID"
              description: "E2E_AWS_ACCESS_KEY_ID"
              secret: "jenkins-fake-access-key"
          - string:
              scope: "GLOBAL"
              id: "E2E_AWS_SECRET_ACCESS_KEY"
              description: "E2E_AWS_SECRET_ACCESS_KEY"
              secret: "jenkins-fake-secret-key"
          - string:
              scope: "GLOBAL"
              id: "E2E_JENKINS_KUBE_TOKEN"
              description: "E2E_JENKINS_KUBE_TOKEN"
              secret: "jenkins-fake-secret-key"



          ########
          # SSH Keys
          ########
          # - basicSSHUserPrivateKey:
          #     scope: "GLOBAL"
          #     id: "deploy-key-shared-library"
          #     username: "root"
          #     passphrase: ""
          #     description: "Deploy key for global shared library"
          #     privateKeySource:
          #       directEntry:
          #         privateKey: "${jenkins-ssh-keys/deploy-key-shared-library}"
          # - basicSSHUserPrivateKey:
          #     scope: "GLOBAL"
          #     id: "ssh-agent-access-key"
          #     username: "ubuntu"
          #     passphrase: ""
          #     description: "SSH key to access agents"
          #     privateKeySource:
          #       directEntry:
          #         privateKey: "${jenkins-ssh-keys/ssh-agent-access-key}"

tool:
  jdk:
    installations:
      # - name: "open-jdk8"
      #   properties:
      #     - installSource:
      #         installers:
      #           - adoptOpenJdkInstaller:
      #               id: "jdk8u232-b09"
      - name: "jdk8"
        properties:
          - installSource:
              installers:
                - jdkInstaller:
                    acceptLicense: true
                    id: "jdk-8u221-oth-JPR"
  maven: # (1)
    installations:
    - name: "maven"
      properties:
      - installSource:
          installers:
          - maven:
              id: "3.8.2"
  dockerTool:
    installations:
    - name: "docker"
      properties:
      - installSource:
          installers:
          - fromDocker:
              version: "latest"
  terraform:
    installations:
    - name: "terraform"
      properties:
      - installSource:
          installers:
          - terraformInstaller:
              id: "1.1.0-linux-amd64"
  git:
    installations:
    - home: "git"
      name: "Default"
unclassified:
  globalLibraries:
    libraries:
      - name: "devops-ci-lib"
        retriever:
          modernSCM:
            scm:
              git:
                remote: "git@github.com:amitkshirsagar13/base-pipeline.git"
                credentialsId: "github-ci-user"
  templateGlobalConfig:
    tier:
      configurationProvider: "null"
      librarySources:
      - libraryProvider:
          scm:
            baseDir: "libraries"
            scm:
              git:
                branches:
                - name: "*/main"
                buildChooser: "default"
                userRemoteConfigs:
                - credentialsId: "github-ci-user"
                  url: "https://github.com/amitkshirsagar13/devops.git"
pipeline {
  agent { label 'terraform-docker-slave' }

  parameters {
    choice(name: 'Environment', choices: ['int','stg','e2e','live'], description: 'Environment level cluster')
    choice(name: 'Region', choices: ['global','us-east-1','us-east-2'], description: 'Cluster Region')
    choice(name: 'Module', choices: ['all', 'infra', 'eks', 's3'], description: 'Modules to execute')
    choice(name: 'Action', choices: ['plan', 'apply', 'destroy'], description: 'Terraform Action')
  }

  options {
    ansiColor('xterm')
  }

  environment {
    AWS_DEFAULT_REGION = "eu-west-1"
    AWS_ACCESS_KEY_ID     = credentials('AWS_ACCESS_KEY_ID')
    AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')
  }

  stages {
    stage("Prepare") {
      steps {
        script {
          userInfo_Id = userInfo('USERID')
          userInfo_Name = userInfo('USER')
          userInfo_Email = userInfo('EMAIL')
          sh """
            echo ID: $userInfo_Id Name: $userInfo_Name Email: $userInfo_Email
          """
        }
      }
    }

    stage("Git Clone") {
      steps {
        script {
          clone("https://github.com/amitkshirsagar13/devops.git")
        }
      }
    }
    
    stage("Evaluate Scripts") {
      steps {
        script {
          terraformEnv = env.Environment
          terraformRegion = env.Region
          terraformModule = env.Module
          terraformAction = env.Action

          sh """
            echo Terraform $terraformEnv Module $terraformModule with $terraformAction
          """
          dir("terragrunt/aws") {
            terraformPath = terraformEnv + "/" + terraformRegion + "/" + terraformModule
            terraformInit(terraformAction, terraformPath)
            terraformPlan(terraformAction, terraformPath)
            terraformApply(terraformAction, terraformPath)
          }
        }
      }
    }
  }
}
pipeline {
  agent { label 'terraform-docker-slave' }

  parameters {
    choice(name: 'Environment', choices: ['local','int','stg','e2e','live'], description: 'Environment level cluster')
    choice(name: 'Region', choices: ['us-east-1','us-east-2','global'], description: 'Cluster Region')
    choice(name: 'Module', choices: ['all','infra','eks','s3','security'], description: 'Modules to execute')
    choice(name: 'Action', choices: ['plan','apply','destroy'], description: 'Terraform Action')
  }

  options {
    ansiColor('xterm')
  }

  environment {
    AWS_DEFAULT_REGION = "us-east-1"
    AWS_ACCESS_KEY_ID     = credentials('AWS_ACCESS_KEY_ID')
    AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')
  }

  stages {
    stage("Prepare") {
      steps {
        script {
          userInfo_Id = userInfo('USERID')
          userInfo_Name = userInfo('USER')
          userInfo_Email = userInfo('EMAIL')
          sh """
            echo ID: $userInfo_Id Name: $userInfo_Name Email: $userInfo_Email
          """
          clone("https://github.com/amitkshirsagar13/devops.git")
        }
      }
    }
    
    stage("Terraform Request") {
      steps {
        script {
          terraformEnv = env.Environment
          terraformRegion = env.Region
          terraformModule = env.Module
          terraformAction = env.Action
          sh """
            echo Terraform $terraformEnv Module $terraformModule with $terraformAction
          """
          terraformPath = "terragrunt/aws/" + terraformEnv + "/" + terraformRegion

          if ( terraformModule != 'all') {
            terraformPath = terraformPath + "/" + terraformModule
          }
        }
      }
    }
    
    stage("Terraform Init") {
      steps {
        script {
          terraformInit(terraformAction, terraformPath)
        }
      }
    }
    
    stage("Terraform Plan") {
      when {
        expression { action == 'plan' || action == 'apply' }
      }
      steps {
        script {
          terraformPlan(terraformModule, terraformAction, terraformPath)
        }
      }
    }
    
    stage("Terraform Apply") {
      when {
        expression { action == 'apply' }
      }
      steps {
        script {
          terraformApply(terraformModule, terraformAction, terraformPath)
        }
      }
    }

    stage("Terraform Destroy") {
      when {
        expression { action == 'destroy' }
      }
      steps {
        script {
          terraformDestroy(terraformModule, terraformAction, terraformPath)
        }
      }
    }
  }
}